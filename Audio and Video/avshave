#!/bin/bash
# Note: When trimming start of videos, only mp4 containers will do it with perfect accuracy, others will typically start a bit earlier.

help(){
echo "Usage: audioshave [options] [file]
Trim an audio or video file's duration losslessly. 

Options:
	-s	Time to shave off start
	-e	Time to shave off end
	-d	Target Duration (overrides -e)"
}

# Process input
readopt='getopts $opts opt;rc=$?;[ "$rc$opt" = "0?" ]&& help && exit 1;[ $rc = 0 ]||{ shift $[OPTIND-1];false; }'
opts=s:e:d:

# Parse options
while eval "$readopt"
do
    #echo OPT:$opt ${OPTARG+OPTARG:$OPTARG} #for debugging
    case "$opt" in
    	"s")
    		shavestart=$OPTARG
    		;;
    	"e")
    		shaveend=$OPTARG
    		;;
    	"d")
    		totalduration=$OPTARG
    		;;
    	*)
    		help
    		exit
    		;;
    esac
done

# Get path and filename
for arg
do
    filein+=$arg
    grep \; <<< "$arg" && echo -e "Error:\n    The path or filename contains an illegal character (;)" && notify-send "vcompress" "Error: The path or filename contains an illegal character (;)" && exit
done

[ ! -f "$filein" ] && help && exit
format=${filein##*.}
fileout="${filein%\.*}_shaved.$format"

if [ $totalduration -gt 0 ]; then
	shaveend="-t $totalduration"
elif [ $shaveend -gt 0 ]; then
	duration=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$filein")
	shaveend=$(bc -l <<< $duration-$shaveend)
	shaveend="-t $shaveend"
fi

if [ $shavestart -gt 0 ]; then
	shavestart="-ss $shavestart"
fi

ffmpeg -y $shavestart -i "$filein" $shaveend -c copy "$fileout"
